/* Intuition
Approach
Complexity

    Time complexity:

    Space complexity:

Code */


--  Write your MySQL query statement below

SELECT name
FROM Customer
WHERE COALESCE(referee_id,0) <> 2;

-- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- Write your MySQL query statement below

/*
select name, population, area 
from World 
where area > 3000000 OR population > 25000000;
*/

select name, population, area
from World
where area > 3000000

union

select name, population, area
from World
where population > 25000000;

-- -------------------------------------------------------------------------------------------------------------------

/* MySQL: LENGTH() is incorrect. Important difference between CHAR_LENGTH() vs LENGTH()

Using LENGTH() is incorrect. The question is asking for the number of characters used in the content. LENGTH() returns the length of the string measured in bytes. CHAR_LENGTH() returns the length of the string measured in characters. */

SELECT tweet_id
FROM Tweets
WHERE CHAR_LENGTH(content) > 15

/*
Reference:
https://stackoverflow.com/questions/1734334/mysql-length-vs-char-length?rq=1

    LENGTH() returns the length of the string measured in bytes.
    CHAR_LENGTH() returns the length of the string measured in characters.
*/


-- --------------------------------------------------------------------------------------------------------------------

/* Likely what is happening is that in the Sales table there are multiple transactions of the same product_id, year, price at different quantity. As a result, if DISTINCT entries were retrieved before joining with Product table, it runs a lot faster. */

SELECT DISTINCT 
    P.product_name, S.year, S.price 
FROM 
    (SELECT DISTINCT product_id, year, price FROM Sales) S
INNER JOIN
    Product AS P
USING (product_id);

-- ---------------------------------------------------------------------------------------------------------------------

/* 3 Different solutions (JOIN, NOT IN, NOT EXISTS) */


SELECT customer_id, COUNT(v.visit_id) as count_no_trans 
FROM Visits v
LEFT JOIN Transactions t ON v.visit_id = t.visit_id
WHERE transaction_id IS NULL
GROUP BY customer_id


SELECT customer_id, COUNT(visit_id) as count_no_trans 
FROM Visits
WHERE visit_id NOT IN (
	SELECT visit_id FROM Transactions
	)
GROUP BY customer_id

SELECT customer_id, COUNT(visit_id) as count_no_trans 
FROM Visits v
WHERE NOT EXISTS (
	SELECT visit_id FROM Transactions t 
	WHERE t.visit_id = v.visit_id
	)
GROUP BY customer_id


